import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;

public class Main {
    private static int N;
    private static int L;
    private static int R;
    private static int[][] map;
    private static boolean[][] visited;
    private static int[][] move = {{1,0}, {-1, 0}, {0,1}, {0, -1}};
    private static ArrayList<Node> list = new ArrayList<>();
    private static class Node{
        int x;
        int y;

        Node(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        N = Integer.parseInt(st.nextToken());
        L = Integer.parseInt(st.nextToken());
        R = Integer.parseInt(st.nextToken());
        map = new int[N][N];
//        visited = new boolean[N][N];
        for(int i=0; i<N; i++) {
            st = new StringTokenizer(br.readLine(), " ");
            for(int j=0; j<N; j++) {
                map[i][j]  = Integer.parseInt(st.nextToken());
            }
        }
        int answer = 0;
        while(true) {
            visited = new boolean[N][N];
            int count = 0;
            for(int i=0; i<N; i++) {
                for(int j=0; j<N; j++) {
                    if(!visited[i][j]) {
                        list.clear();
                        findArea(j, i);
                        if(list.size() >1) {
                            count++;
                            int sum = 0;
                            for(int k=0; k<list.size(); k++) {
                                sum += map[list.get(k).y][list.get(k).x];
                            }
                            sum /= list.size();
                            for(int k=0; k<list.size(); k++) {
                                map[list.get(k).y][list.get(k).x] = sum;
                            }
                        }

                    }
                }
            }
            if(count == 0) break;
            answer++;
        }
        System.out.println(answer);


    }
    private static void findArea (int x, int y) {

        if(!visited[y][x]) {

            visited[y][x] = true;
            list.add(new Node(x, y));
            for(int i=0; i<move.length; i++) {
                int nx = x+ move[i][0];
                int ny = y+ move[i][1];
//                System.out.println("nx: " + nx + " ny: " + ny);
                if(nx>=0 && nx<N && ny>=0 && ny <N && !visited[ny][nx]) {
                    int check = Math.abs(map[y][x] - map[ny][nx]);
                    if(check>=L && check<=R) {
//                        list.add(new Node(nx, ny));
//                        System.out.println("find");
                        findArea(nx, ny);
                    }
                }
            }
        }
    }
}
