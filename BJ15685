package coding;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class BJ15685 {
    private static int[][] map = new int[101][101];
    private static int[][] move = {{0,1}, {-1, 0}, {0, -1}, {1, 0}};
    private static class Point{
        int x;
        int y;
        int d;
        int g;

        Point(int x, int y, int d, int g) {
            this.x = x;
            this.y = y;
            this.d = d;
            this.g = g;
        }
    }
    public static void main(String[] args) throws  Exception{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        StringTokenizer st;
        ArrayList<Point> list = new ArrayList<>();
        for(int i=0; i<N; i++) {
            st = new StringTokenizer(br.readLine());
            int x = Integer.parseInt(st.nextToken());
            int y = Integer.parseInt(st.nextToken());
            int d = Integer.parseInt(st.nextToken());
            int g = Integer.parseInt(st.nextToken());
            list.add(new Point(x, y, d, g));
        }

        for(int i=0; i<list.size(); i++) {
            Point point = list.get(i);
            ArrayList<Integer> directions = new ArrayList<>();
            directions.add(point.d);

            while(true) {
                if(Math.pow(2, point.g) == directions.size()) break;
                for(int j=directions.size()-1; j>=0; j--) {
                    directions.add((directions.get(j) + 1 )%4);
                }
            }

            map[point.y][point.x] = 1;
            for(int j=0; j<directions.size(); j++) {
                int direction = directions.get(j);
                point.y += move[direction][0];
                point.x += move[direction][1];
                map[point.y][point.x] = 1;
            }
        }
        int answer = 0;
        for(int i=0; i<100; i++) {
            for(int j=0; j<100; j++) {
//                System.out.print(map[i][j] + "\t");
                if(map[i][j] == 1) {
                    if(countSquare(j, i)) {
                        answer ++;
                    }
                }
            }
//            System.out.println();
        }
        System.out.println(answer);
    }

    private static boolean countSquare(int x, int y) {
        return(map[y+1][x] == 1 && map[y+1][x+1] == 1 && map[y][x+1] == 1) ;
    }
}
