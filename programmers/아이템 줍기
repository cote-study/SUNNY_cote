import java.util.*;

class Solution {
    private static int[][] map;
    private static boolean[][] visited;
    private static int[][] move = {{0 ,1}, {0, -1}, {1, 0}, {-1, 0}};
    private static class Point{
        int x;
        int y;
        int cnt;
        Point(int x, int y, int cnt) {
            this.x = x;
            this.y = y;
            this.cnt = cnt;
        }
    }
    public int solution(int[][] rectangle, int characterX, int characterY, int itemX, int itemY) {
        map = new int[102][102];
        visited = new boolean[102][102];
        int answer = 0;
        for(int i=0; i<rectangle.length; i++) {
            checkMap(rectangle[i]);
        }
        // for(int i=0; i<map.length; i++) {
        //     for(int j=0; j<map[i].length; j++) {
        //         System.out.print(map[i][j] + " ");
        //     }
        //     System.out.println();
        // }

        Queue<Point> queue = new LinkedList<>();
        queue.add(new Point(characterX*2, characterY*2, 0));
        while(!queue.isEmpty()) {
            Point now = queue.poll();
            if(now.y == itemY*2 && now.x == itemX*2) {
                answer = now.cnt/2 ;
                break;
            }
            if(!visited[now.y][now.x]) {
                visited[now.y][now.x] = true;
                for(int i=0; i<move.length; i++) {
                    int nx = now.x + move[i][1];
                    int ny = now.y + move[i][0];
                    if(nx>=1 && nx <=101 && ny>=1 && ny <=101) {
                        if(!visited[ny][nx] && map[ny][nx]==-1) {
                            if(InArea(nx, ny, rectangle)) {
                               queue.add(new Point(nx, ny, now.cnt+1)); 
                            }
                            
                            
                        }                        
                    }

                }
            }
        }

        return answer;
    }
    private static boolean InArea(int x, int y, int[][] rectangle) {
        for(int[] rect : rectangle) {
            for(int i=0; i<rect.length; i++) {
                if(x>(rect[0]*2) && x<(rect[2]*2) && y>(rect[1]*2) && y<(rect[3]*2)) {
                    return false;
                }
            }
        }
        return true;
    }
    private static void checkMap(int[] rectangle) {
        int minX = rectangle[0] *2;
        int minY = rectangle[1] *2;
        int maxX = rectangle[2] *2;
        int maxY = rectangle[3] *2;
        for(int i=minX; i<=maxX; i++) {
            for(int j=minY; j<=maxY; j++) {
                map[j][i] = -1;
            }
        }
    }
}
