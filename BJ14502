package coding;

import java.awt.Point;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;

public class BJ14502 {
    private static int[][] map;
    private static int[][] move = {{1,0}, {-1, 0}, {0,1}, {0, -1}};
    private static int N;
    private static int M;
    private static boolean[][] visited;
    private static boolean[][] visitedVirus;
    private static int[][] output = new int[3][2];
    private static int count = 0;
    private static ArrayList<Point> list = new ArrayList<>();
    private static int cnt = 0;
    private static int answer = 0;
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        map = new int[N][M];
        visited = new boolean[N][M];
        visitedVirus = new boolean[N][M];
        count = N*M-3;
        for(int i=0; i<N; i++) {
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<M; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
                if(map[i][j] == 1 || map[i][j] == 2) {
                    count --;
                    if(map[i][j] == 2) {
                        list.add(new Point(i, j));
                    }
                }
            }
        }
        bfs(0);
        System.out.println(answer);

    }
    private static void bfs (int depth) {
        if(depth == 3) {
            for(int i=0; i<3; i++) {
                map[output[i][0]][output[i][1]] = 3;
            }
            cnt =0;
            for(int i=0; i<visitedVirus.length; i++) {
                Arrays.fill(visitedVirus[i], false);
            }

            for(int i=0; i<list.size(); i++) {
                Point point = list.get(i);
                find(point.y, point.x);
                if(cnt == count) break;

            }
            answer = Math.max(answer, count -cnt);
            for(int i=0; i<3; i++) {
                map[output[i][0]][output[i][1]] = 0;
            }
            return;
        }
        for(int i=0; i<N; i++) {
            for(int j=0; j<M; j++) {
                if(!visited[i][j] && map[i][j] == 0){
                    visited[i][j] = true;
                    output[depth][0] = i;
                    output[depth][1] = j;
                    bfs(depth+1);
                    visited[i][j] = false;
                }
            }
        }
    }
    private static void find(int x, int y) {

        for(int j=0; j<move.length; j++) {

            int nx = x + move[j][0];
            int ny = y + move[j][1];
            if(nx>=0 && nx <M && ny >=0 && ny<N) {
                if(map[ny][nx] == 0 && !visitedVirus[ny][nx]) {

                    cnt++;
                    visitedVirus[ny][nx] = true;
                    find(nx, ny);
                }
            }

        }

    }
}
